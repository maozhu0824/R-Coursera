# R-Coursera
# Logic Expression
> TRUE & c(TRUE, FALSE, FALSE)
[1]  TRUE FALSE FALSE
What happens in this case is that the left operand `TRUE` is recycled across every element in the vector of the right operand. This is 
the equivalent statement as c(TRUE, TRUE, TRUE) & c(TRUE, FALSE, FALSE).

> TRUE && c(TRUE, FALSE, FALSE)
[1] TRUE
In this case, the left operand is only evaluated with the first member of the right operand (the vector). The rest of the elements in the 
vector aren't evaluated at all in this expression.

# The OR operator follows a similar set of rules. The `|` version of OR evaluates OR across an entire vector, while the `||` version of 
OR only evaluates the first member of a vector.

> TRUE| c(TRUE,FALSE,FALSE)
[1] TRUE TRUE TRUE

> TRUE || c(TRUE, FALSE, FALSE)
[1] TRUE

> 5 > 8 || 6 != 8 && 4 > 3.9
[1] TRUE
| Let's walk through the order of operations in the above case. First the left
| and right operands of the AND operator are evaluated. 6 is not equal 8, 4 is
| greater than 3.9, therefore both operands are TRUE so the resulting
| expression `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR
| operator is evaluated: 5 is not greater than 8 so the entire expression is
| reduced to FALSE || TRUE. Since the right operand of this expression is TRUE
| the entire expression evaluates to TRUE.


| The function isTRUE() takes one argument. If that argument evaluates to
| TRUE, the function will return TRUE. Otherwise, the function will return
| FALSE.
> isTRUE(6 > 4)
[1] TRUE


| The function identical() will return TRUE if the two R objects passed to it
| as arguments are identical.


| xor() function, which takes two arguments.
| The xor() function stands for exclusive OR. If one argument evaluates to
| TRUE and one argument evaluates to FALSE, then this function will return
| TRUE, otherwise it will return FALSE.


| The which() function takes a logical vector as an argument and returns the
| indices of the vector that are TRUE. For example which(c(TRUE, FALSE, TRUE))
| would return the vector c(1, 3).

> ints <- sample(10)
> ints
 [1]  6  3  5  1  8  4  2  9 10  7
> ints > 5
 [1]  TRUE FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE  TRUE
> which(ints > 7)
[1] 5 8 9


| Like the which() function, the functions any() and all() take logical
| vectors as their argument. The any() function will return TRUE if one or
| more of the elements in the logical vector is TRUE. The all() function will
| return TRUE if every element in the logical vector is TRUE.
> all(ints < 0)
[1] FALSE
> all(ints > 0)
[1] TRUE


# Functions
| Functions are one of the fundamental building blocks of the R language. They
| are small pieces of reusable code that can be treated like any other R
| object.


> Sys.Date()
[1] "2016-10-14"


| The last R expression to be evaluated in a function will become the return
| value of that function.

remainder <- function(num, divisor = 2) {
    num %% divisor
  # Write your code here!
  # Remember: the last expression evaluated will be returned! 
}

| You provided one argument to the function, and R matched that argument to 'num' since 'num' is the first argument. The default value 
for 'divisor' is 2, so the function used the default value you provided.
Now let's test the remainder function by providing two arguments. Type: remainder(11, 5) and let's see what happens.
> remainder(11,5)
[1] 1

#Function within a function: 
evaluate <- function(func, dat){
    func(dat)
  # Write your code here!
  # Remember: the last expression evaluated will be returned! 
}

# The ellipses can be used to pass on arguments to other functions that are used within the function you're writing. Usually a function
that has the ellipses as an argument has the ellipses as the last argument. The usage of such a function would look like:
ellipses_func(arg1, arg2 = TRUE, ...)

telegram <- function(...){
    paste("START",...,"STOP",collapse = " ")
}
> telegram("Zhu")
[1] "START Zhu STOP"


mad_libs <- function(...){
    
    a <- list(...)
    place <- a[['place']]
    adjective <- a[['adjective']]
    noun <- a[['noun']]
  # Do your argument unpacking here!
  
  # Don't modify any code below this comment.
  # Notice the variables you'll need to create in order for the code below to
  # be functional!
  paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}


"%p%" <- function(char1, char2){ # Remember to add arguments!
    paste(char1,char2, collapse = " ")
  
> 'I' %p% 'love' %p% "R!"
[1] "I love R!"



#Dates and Times
# R has a special way of representing dates and times, which can be helpful if you're working with data that show how something changes 
over time (i.e. time-series data) or if your data contain some other temporal information, like dates of birth.)

# Dates are represented by the 'Date' class and times are represented by the'POSIXct' and 'POSIXlt' classes. 
# Internally, dates are stored as the number of days since 1970-01-01 and times are stored as either the number of seconds since 
1970-01-01 (for 'POSIXct') or a list of seconds, minutes, hours, etc. (for 'POSIXlt').

> d1 <- Sys.Date()
> class(d1)
[1] "Date"

> unclass(d1)
[1] 17088
| That's the exact number of days since 1970-01-01!

> d1
[1] "2016-10-14"

> d2 <- as.Date("1969-01-01")
> unclass(d2)
[1] -365
| As you may have anticipated, you get a negative number. In this case, it's -365, since 1969-01-01 is exactly one calendar year 
(i.e. 365 days) BEFORE 1970-01-01.

> t1 <- Sys.time()
> t1
[1] "2016-10-14 17:59:47 CDT"
> class(t1)
[1] "POSIXct" "POSIXt" 
> unclass(t1)
[1] 1476485988
| By default, Sys.time() returns an object of class POSIXct, but we can coerce
| the result to POSIXlt with as.POSIXlt(Sys.time()). Give it a try and store the
| result in t2.

> t2 <- as.POSIXlt(Sys.time())
> t2
[1] "2016-10-14 18:07:55 CDT"
> class(t2)
[1] "POSIXlt" "POSIXt" 
> unclass(t2)
$sec
[1] 55.36375

$min
[1] 7

$hour
[1] 18

$mday
[1] 14

$mon
[1] 9

$year
[1] 116

$wday
[1] 5

$yday
[1] 287

$isdst
[1] 1

$zone
[1] "CDT"

$gmtoff
[1] -18000

attr(,"tzone")
[1] ""    "CST" "CDT"

> str(unclass(t2))
List of 11
 $ sec   : num 55.4
 $ min   : int 7
 $ hour  : int 18
 $ mday  : int 14
 $ mon   : int 9
 $ year  : int 116
 $ wday  : int 5
 $ yday  : int 287
 $ isdst : int 1
 $ zone  : chr "CDT"
 $ gmtoff: int -18000
 - attr(*, "tzone")= chr [1:3] "" "CST" "CDT"

> weekdays(d1)
[1] "Friday"

> months(t1)
[1] "October"

> quarters(t2)
[1] "Q4"

| Often, the dates and times in a dataset will be in a format that R does not
| recognize. The strptime() function can be helpful in this situation.
| strptime() converts character vectors to POSIXlt. In that sense, it is similar
| to as.POSIXlt(), except that the input doesn't have to be in a particular
| format (YYYY-MM-DD).

> t4 <- strptime(t3, "%B %d, %Y %H:%M")
> t4
[1] "1986-10-17 08:24:00 CDT"

> class(t4)
[1] "POSIXlt" "POSIXt" 

> Sys.time() - t1
Time difference of 17.28496 mins

| Use difftime(Sys.time(), t1, units = 'days') to find the amount of time in
| DAYS that has passed since you created t1.
> difftime(Sys.time(), t1, units = 'days')
Time difference of 0.01292307 days

"lubridate package" 






